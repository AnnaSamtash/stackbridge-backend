{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "WaterTracker Web App",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "**API documentation for project WaterTracker Web App**\n\nThis project is a web application for tracking and managing water intake|\n  throughout the day. It calculates an individual daily water consumption|\n  rate based on user data and provides statistics for daily and monthly|\n  consumption. This helps users adjust their lifestyle and monitor progress|\n  toward better health.\n\nThe project includes user registration, authentication, and authorization,|\n  with the ability to edit personal data and records. The application has a|\n  user-friendly interface, ensuring security through password encryption and|\n  token-based identification. Also application supports password recovery via|\n  email.\n\n**Key Features:**\n\nUser registration and authorization.\n\nUpdate personal data, avatar, and password.\n\nAdd, edit, and delete water intake records.\n\nCalculate and update daily water consumption rate.\n\nDisplay detailed daily and monthly water intake statistics.\n\nPassword recovery via email.\n\n**Technology stack used in the project:**\n\nNode.js - JavaScript server runtime\n\nExpress.js - framework for developing web applications on Node.js\n\nMongoDB - NoSQL Database\n\nMongoose - library for working with MongoDB in Node.js",
    "contact": {
      "email": "annasamtash@gmail.com"
    }
  },
  "servers": [
    {
      "url": "https://watertracker-app.onrender.com"
    },
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Users",
      "description": "Operations about users."
    },
    {
      "name": "WaterRate",
      "description": "Operations about waterRate."
    },
    {
      "name": "WaterNotes",
      "description": "Operations about water note."
    }
  ],
  "paths": {
    "/waterNotes": {
      "post": {
        "tags": [
          "WaterNotes"
        ],
        "summary": "Create a water note",
        "operationId": "WaterNoteController_createWaterNote",
        "description": "Create a water note in the database and return it\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "# Description of request parameters:\n\n**waterVolume** - number, amount of water in note. Field must contain min 1, max 5000.\n**Required parameter**\n\n**date** - string, date of water note. Field must contain a valid date with a specified time in it.\n**Required parameter**\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "waterVolume",
                  "date"
                ],
                "properties": {
                  "waterVolume": {
                    "description": "Amount of water in note",
                    "type": "number",
                    "example": 250
                  },
                  "date": {
                    "description": "Date of water note",
                    "type": "string",
                    "example": "2024-08-29 05:30 AM"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Water note created and returned\n\nDescription of response parameters:\n\n**_id** - ObjectId, unique water note ID.\n\n**waterVolume** - number, amount of water in note.\n\n**date** - string, date of water note.\n\n**userId** - ObjectId, unique user ID.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/waterNoteResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError_400"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          }
        }
      }
    },
    "/waterNotes/{id}": {
      "delete": {
        "tags": [
          "WaterNotes"
        ],
        "summary": "Delete a water note",
        "operationId": "WaterNoteController_deleteWaterNote",
        "description": "Delete a water note\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Water note by id deleted\n"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          },
          "404": {
            "description": "Not Found error - Water note with id not found or Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Water note with id not found or Invalid ID format"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "WaterNotes"
        ],
        "summary": "Update a water note",
        "operationId": "WaterNoteController_updateWaterNote",
        "description": "Update and return a water note\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "# Description of request parameters:\n\n**waterVolume** - number, amount of water in note. Field must contain min 1, max 5000.\n\n**date** - string, date of water note. Field must contain a valid date with a specified time in it.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "waterVolume",
                  "date"
                ],
                "properties": {
                  "waterVolume": {
                    "description": "Amount of water in note",
                    "type": "number",
                    "example": 250
                  },
                  "date": {
                    "description": "Date of water note",
                    "type": "string",
                    "example": "2024-08-29 05:30 AM"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Water note updated by id and returned\n\nDescription of response parameters:\n\n**_id** - ObjectId, unique water note ID.\n\n**waterVolume** - number, amount of water in note.\n\n**date** - string, date of water note.\n\n**userId** - ObjectId, unique user ID.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/waterNoteResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          },
          "404": {
            "description": "Not Found error - Water note with id not found or Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Water note with id not found or Invalid ID format"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/waterNotes/today": {
      "get": {
        "tags": [
          "WaterNotes"
        ],
        "summary": "Get all water notes for today",
        "operationId": "WaterNoteController_getTodayWaterNotes",
        "description": "Get and return all water notes for today\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Got and returned all water notes for today\n\nDescription of response parameters:\n\nReturn array of objects, each of which includes these properties:\n\n**_id** - ObjectId, unique water note ID.\n\n** waterVolume** - number, amount of water in note.\n\n**date** - string, date of water note.\n\n**serId** - ObjectId, unique user ID.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/todayWaterNotes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          },
          "404": {
            "description": "Not Found error - Water notes or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Water notes or user not found"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/waterNotes/{year}/{month}": {
      "get": {
        "tags": [
          "WaterNotes"
        ],
        "summary": "Get all water notes for month",
        "operationId": "WaterNoteController_getMonthlyWaterNotes",
        "description": "Get and return all water notes for month\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "year",
            "required": true,
            "schema": {
              "type": "number",
              "example": 2024
            }
          },
          {
            "in": "path",
            "name": "month",
            "required": true,
            "schema": {
              "type": "number",
              "example": 8
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Got and returned all water notes for month\n\nDescription of response parameters:\n\nReturn array of objects, each of which includes these properties:\n\n**date** - string, date of month.\n\n**waterRate** - number, user's daily water consumption rate.\n\n**percentOfWaterRate** - string, percentage of water drunk to the\ndaily rate of water by date'.\n\n**amountOfRecords** - number, amount of water notes by date.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/monthlyWaterNotes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          },
          "404": {
            "description": "Not Found error - Water notes or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Water notes or user not found"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign up new user",
        "operationId": "AuthController_registerUser",
        "description": "Create a new user in the database\n",
        "security": [],
        "requestBody": {
          "required": true,
          "description": "New User Registered\n\n# Description of request parameters:\n\n**email** - string, user's email. Field must contain a valid email.\n**Required parameter**\n\n**password** - string, user's password. Field must contain at least 8 characters, maximum 64.\n**Required parameter**\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "Harley.Gleason@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "password89"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New User Registered\n\nDescription of response parameters:\n\n**token** - string, token is used to store the authorization state\n  of the user in the system, which allows users to make secure requests\n  to the API.\n\n**user** - object, includes these properties:\n\n  **name** - string, user's name.\n\n  **email** - string, user's email.\n\n  **gender** - string, user's gender.\n\n  **avatar** - string, user's avatar.\n\n  **waterRate** - string, user's daily water consumption rate.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userWithTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError_400"
          },
          "409": {
            "$ref": "#/components/responses/ConflictError_409"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign in existing user",
        "operationId": "AuthController_loginUser",
        "description": "User authentication and authorization by passed email and password\n",
        "security": [],
        "requestBody": {
          "required": true,
          "description": "# Description of request parameters:\n\n**email** - string, user's email. Field must contain a valid email.\n**Required parameter**\n\n**password** - string, user's password. Field must contain at least 8 characters, maximum 64.\n**Required parameter**\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "Harley.Gleason@gmail.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "password89"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sign in existing user\n\nDescription of response parameters:\n\n**token** - string, token is used to store the authorization state\n  of the user in the system, which allows users to make secure requests\n  to the API.\n\n**user** - object, includes these properties:\n\n  **name** - string, user's name.\n\n  **email** - string, user's email.\n\n  **gender** - string, user's gender.\n\n  **avatar** - string, user's avatar.\n\n  **waterRate** - string, user's daily water consumption rate.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userWithTokenResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError_400"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError_404"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout a user",
        "operationId": "AuthController_logout",
        "description": "The logout endpoint is a logout mechanism that destroys the\n  token that was issued during previous authentication.\n\nWhen the user clicks the log out button, he makes a request for a\n  URL/api/auth/logout with a valid token in the Authorization header.\n  The server checks the validity of the token, if the token is valid,\n  then the token is deleted and the user returns to the login page.\n  If the token is not valid, the server returns the 401 status and\n  reports that the token is invalid.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User logged out\n"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Send email for reset password",
        "operationId": "AuthController_requestResetEmail",
        "description": "Create reset jwt and send email with link to reset password page\n\nWhen the user presses the password reset button, he makes a request\n  to URL/api/auth/send-reset-email with a registered email. The server\n  checks the presence of the user in the system using the transmitted\n  email, if it finds that it forms a jwt token and transfers it to the link\n  to reset password page in the email.If a user with such mail is not found,\n  then the server returns this result in an error with the status 404th.\n",
        "security": [],
        "requestBody": {
          "required": true,
          "description": "# Description of request parameters:\n\n**email** - string, user's email. Field must contain a valid email.\n**Required parameter**\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "Harley.Gleason@gmail.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email successfully send\n\nDescription of response parameters:\n\nempty object\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError_404"
          },
          "500": {
            "$ref": "#/components/responses/EmailSendError_500"
          }
        }
      }
    },
    "/auth/update-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset password",
        "operationId": "AuthController_resetPassword",
        "description": "Overwrites the user password field value in the database\n",
        "security": [],
        "requestBody": {
          "required": true,
          "description": "# Description of request parameters:\n\n**password** - string, user's new password. Field must contain at least 8 characters, maximum 64.\n**Required parameter**\n\n**token** - string, token is used to store the authorization\nstate of the user in the system, which allows users to make\nsecure requests to the API.\n**Required parameter**\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resetPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password  successfully reset\n\nDescription of response parameters:\n\nempty object\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError_400"
          },
          "401": {
            "description": "Token is expired or invalid\n"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError_404"
          }
        }
      }
    },
    "/users": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user's data",
        "operationId": "UsersController_updatedUser",
        "description": "Update and return current user's data\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "# Description of request parameters:\n\n**name** - string, user's name. Field must contain a maximum of 32 characters.\n\n**email** - string, user's email. Field must contain a valid email.\n\n**gender** - string, user's gender. Field must contain one of two values: man, woman.\n\n**password** - string, user's old password. Field must contain at least 8 characters, maximum 64.\n\n**newPassword** - string, user's new password. Field must contain at least 8 characters, maximum 64.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "default": null,
                    "example": "Harley Gleason"
                  },
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "format": "email",
                    "example": "Harley.Gleason@gmail.com"
                  },
                  "gender": {
                    "description": "User's gender",
                    "type": "string",
                    "enum": [
                      "woman",
                      "man"
                    ],
                    "default": "woman"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "password89"
                  },
                  "newPassword": {
                    "description": "User's new password",
                    "type": "string",
                    "example": "password89"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User's data updated and returned\n\nDescription of response parameters:\n\n**name** - string, user's name.\n\n**email** - string, user's email.\n\n**gender** - string, user's gender.\n\n**waterRate** - number, user's daily water rate.\n\n**avatar** - string, user's avatar.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missed new password\n"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError_404"
          },
          "409": {
            "$ref": "#/components/responses/ConflictError_409"
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's avatar'",
        "operationId": "UsersController_updateUserAvatar",
        "description": "Update and return user's avatar\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "description": "User's avatar",
                    "type": "string",
                    "default": null,
                    "format": "binary",
                    "example": "<https://res.cloudinary.com/dartenrtb/image/upload/v1724914466/waterTracker/ibt3icvvc6hpborulsjb.png>"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User`s avatar updated and returned\n\nDescription of response parameters:\n\n**avatar** - string, user's avatar.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "avatar"
                  ],
                  "properties": {
                    "avatar": {
                      "description": "User's avatar",
                      "type": "string",
                      "default": null,
                      "format": "binary",
                      "example": "<https://res.cloudinary.com/dartenrtb/image/upload/v1724914466/waterTracker/ibt3icvvc6hpborulsjb.png>"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError_400"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError_404"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user information",
        "operationId": "UsersController_getUserInfo",
        "description": "Get and return current user's data from database\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logged user returned\n\nDescription of response parameters:\n\n**name** - string, user's name.\n\n**email** - string, user's email.\n\n**gender** - string, user's gender.\n\n**avatar** - string, user's avatar.\n\n**waterRate** - string, user's daily water consumption rate.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          }
        }
      }
    },
    "/waterRate": {
      "patch": {
        "tags": [
          "WaterRate"
        ],
        "summary": "Change user's waterRate",
        "operationId": "WaterRateController_updateWaterRate",
        "description": "Change and return user`s daily  water consumption rate",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "description": "# Description of request parameters:\n\n**waterRate** - number, User's daily  water consumption rate. Field must contain min 1, max 15000.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "waterRate"
                ],
                "properties": {
                  "waterRate": {
                    "description": "User's daily  water consumption rate",
                    "type": "number",
                    "default": 2000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User`s waterRate successfully updated and return",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "waterRate"
                  ],
                  "properties": {
                    "waterRate": {
                      "description": "User's daily  water consumption rate",
                      "type": "number",
                      "default": 2000
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError_400"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError_401"
          },
          "404": {
            "description": "Not Found error - Water note with id not found or Invalid ID format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Water note with id not found or Invalid ID format"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "waterNoteResponse": {
        "type": "object",
        "required": [
          "_id",
          "waterVolume",
          "date",
          "userId"
        ],
        "properties": {
          "_id": {
            "description": "Water note ID",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "waterVolume": {
            "description": "Amount of water in note",
            "type": "number",
            "example": 250
          },
          "date": {
            "description": "Time of water note",
            "type": "string",
            "example": "2024-08-28T03:30:00.000Z"
          },
          "userId": {
            "description": "User's id of water note",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          }
        }
      },
      "todayWaterNotes": {
        "type": "object",
        "required": [
          "percentOfWaterRate",
          "todayWaterList"
        ],
        "properties": {
          "percentOfWaterRate": {
            "description": "Percentage of water drunk to the daily water rate ",
            "type": "string",
            "example": "11%"
          },
          "todayWaterList": {
            "description": "list of water notes by today",
            "type": "array",
            "items": {
              "description": "Water note",
              "type": "object",
              "$ref": "#/components/schemas/waterNoteResponse"
            }
          }
        }
      },
      "monthlyWaterNotes": {
        "type": "array",
        "items": {
          "description": "Daily statistics about consumer water",
          "type": "object",
          "required": [
            "date",
            "waterRate",
            "percentOfWaterRate",
            "amountOfRecords"
          ],
          "properties": {
            "date": {
              "description": "Date of month",
              "type": "string",
              "example": "27, August"
            },
            "waterRate": {
              "description": "User's daily water consumption rate",
              "type": "string",
              "example": "1.8 L"
            },
            "percentOfWaterRate": {
              "description": "Percentage of water drunk to the daily water rate by date",
              "type": "string",
              "example": "28%"
            },
            "amountOfRecords": {
              "description": "Amount of water notes by date",
              "type": "number",
              "example": 5
            }
          }
        }
      },
      "userResponse": {
        "type": "object",
        "required": [
          "name",
          "email",
          "gender",
          "avatar",
          "waterRate"
        ],
        "properties": {
          "name": {
            "description": "User's name",
            "type": "string",
            "default": null,
            "example": "Harley Gleason"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "format": "email",
            "example": "Harley.Gleason@gmail.com"
          },
          "gender": {
            "description": "User's gender",
            "type": "string",
            "enum": [
              "woman",
              "man"
            ],
            "default": "woman"
          },
          "avatar": {
            "description": "User's avatar",
            "type": "string",
            "default": null,
            "format": "binary",
            "example": "<https://res.cloudinary.com/dartenrtb/image/upload/v1724914466/waterTracker/ibt3icvvc6hpborulsjb.png>"
          },
          "waterRate": {
            "description": "User's daily water consumption rate",
            "type": "number",
            "default": 2000
          }
        }
      },
      "userWithTokenResponse": {
        "type": "object",
        "required": [
          "user",
          "token"
        ],
        "properties": {
          "user": {
            "description": "Object with user's email",
            "type": "object",
            "$ref": "#/components/schemas/userResponse"
          },
          "token": {
            "description": "User's token",
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIyOWI4ZmZmNS0xN2NjLTQ5NTYtOTViZC1jN2U3N2FkZDEwOWEiLCJpYXQiOjE2ODE4OTM3MzEsImV4cCI6MTAwMDAwMDE2ODE4OTM3MzJ9.hQpNKIj4SR7Gm9waUMn7hzwKQyqwKrniL_qSW7Sx"
          }
        }
      },
      "resetPassword": {
        "type": "object",
        "required": [
          "password",
          "token"
        ],
        "properties": {
          "password": {
            "description": "User's password",
            "type": "string",
            "example": "pasword89"
          },
          "token": {
            "description": "User's token",
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaWQiOiIyOWI4ZmZmNS0xN2NjLTQ5NTYtOTViZC1jN2U3N2FkZDEwOWEiLCJpYXQiOjE2ODE4OTM3MzEsImV4cCI6MTAwMDAwMDE2ODE4OTM3MzJ9.hQpNKIj4SR7Gm9waUMn7hzwKQyqwKrniL_qSW7Sx"
          }
        }
      }
    },
    "responses": {
      "ValidationError_400": {
        "description": "Validation error\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UnauthorizedError_401": {
        "description": "Unauthorized error - Invalid token - If the request does not\ncontain a valid token or the token has already expired, the\nserver will return a response with an HTTP 401 Unauthorized\nstatus code.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ConflictError_409": {
        "description": "Conflict Error - User with such email already exists",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Conflict Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "NotFoundError_404": {
        "description": "Not Found error - User not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EmailSendError_500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server Error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to send the email, please try again later"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}